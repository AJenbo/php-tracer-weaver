#!/usr/bin/env php
<?php

use PHPTracerWeaver\Reflector\StaticReflector;
use PHPTracerWeaver\Scanner\ClassScanner;
use PHPTracerWeaver\Scanner\NamespaceScanner;
use PHPTracerWeaver\Scanner\FunctionBodyScanner;
use PHPTracerWeaver\Scanner\FunctionParametersScanner;
use PHPTracerWeaver\Scanner\ModifiersScanner;
use PHPTracerWeaver\Scanner\ScannerMultiplexer;
use PHPTracerWeaver\Scanner\TokenStreamParser;
use PHPTracerWeaver\Signature\Signatures;
use PHPTracerWeaver\Transform\DocCommentEditorTransformer;
use PHPTracerWeaver\Transform\TracerDocBlockEditor;
use PHPTracerWeaver\Xtrace\FunctionTracer;
use PHPTracerWeaver\Xtrace\TraceReader;
use PHPTracerWeaver\Xtrace\TraceSignatureLogger;

if (PHP_SAPI !== 'cli') {
    echo 'Warning: PHPTracerWeaver should be invoked via the CLI version of PHP, not the ' . PHP_SAPI . ' SAPI'
        . PHP_EOL;
}

require __DIR__ . '/../src/bootstrap.php';

if (__FILE__ !== realpath($_SERVER['SCRIPT_FILENAME'])) {
    return;
}

error_reporting(E_ALL | E_STRICT);

if (isset($_SERVER['WEAVE_SETUP_FILE'])) {
    require_once $_SERVER['WEAVE_SETUP_FILE'];
}

$traceFilename = 'dumpfile.xt';
$fileToWeave = $argv[1];
if (!is_file($fileToWeave)) {
    throw new Exception('File (' . $fileToWeave . ") isn't readable");
}

$reflector = new StaticReflector();
$sigs = new Signatures($reflector);
// read trace
if (is_file($traceFilename)) {
    $trace = new TraceReader(new SplFileObject($traceFilename));
    $collector = new TraceSignatureLogger($sigs, $reflector);
    $trace->process(new FunctionTracer($collector, $reflector));
}

// transform file
$scanner = new ScannerMultiplexer();
$parametersScanner = new FunctionParametersScanner();
$scanner->appendScanner($parametersScanner);
$functionBodyScanner = new FunctionBodyScanner();
$scanner->appendScanner($functionBodyScanner);
$modifiersScanner = new ModifiersScanner();
$scanner->appendScanner($modifiersScanner);
$classScanner = new ClassScanner();
$scanner->appendScanner($classScanner);
$namespaceScanner = new NamespaceScanner();
$scanner->appendScanner($namespaceScanner);
$editor = new TracerDocBlockEditor($sigs, $classScanner, $functionBodyScanner, $parametersScanner, $namespaceScanner);
$transformer = new DocCommentEditorTransformer($functionBodyScanner, $modifiersScanner, $parametersScanner, $editor);
$scanner->appendScanner($transformer);
$tokenizer = new TokenStreamParser();
$tokenStream = $tokenizer->scan(file_get_contents($fileToWeave));
$tokenStream->iterate($scanner);

if (isset($argv[2])) {
    file_put_contents($argv[2], $transformer->getOutput());

    return;
}

echo $transformer->getOutput();
